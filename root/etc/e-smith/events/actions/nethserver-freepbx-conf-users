#!/usr/bin/perl

#
# Copyright (C) 2017 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use JSON;
use esmith::ConfigDB;
use NethServer::SSSD;
use DBI;
use NethServer::Password;

my $sssd = new NethServer::SSSD();
my $db = esmith::ConfigDB->open_ro() or die "Could not open config db";
my $domain = $db->get('DomainName')->prop('type');
my %settings = ();
my $secutiry;
if ($sssd->port == 636) {
    $secutiry = 'ssl';
} elsif ($sssd->startTls) {
    $secutiry = 'tls';
}

if ($sssd->isLdap) {
    my $userdn = $sssd->bindDN;
    $settings{'auth-settings'} = encode_json ({
        host => $sssd->host,
        port => $sssd->port,
        tls => ($secutiry = 'tls' ? JSON::true : JSON::false),
        ssl => ($secutiry = 'ssl' ? JSON::true : JSON::false),
        basedn => $sssd->baseDN,
        username => $sssd->bindUser,
        password => $sssd->bindPassword,
        userident => 'cn',
        displayname => 'gecos',
        userdn => $sssd->baseDN,
        la => '',
        sync => '0 * * * *'
    });
    $settings{'driver'} = 'Openldap';
    $settings{'name'} = 'NethServer LDAP';
} elsif($sssd->isAD) {
    $settings{'auth-settings'} = encode_json ({
        host => $sssd->host,
        port => $sssd->port,
        dn => $sssd->userDN,
        username => $sssd->bindUser,
        password => $sssd->bindPassword,
        domain => $db->get('sssd')->prop('Realm'),
        connection => $secutiry,
        localgroups => '0',
        createextensions => '',
        externalidattr => 'objectGUID',
        descriptionattr => 'description',
        commonnameattr => 'cn',
        userdn => '',
        userobjectclass => 'user',
        userobjectfilter => '(&(objectClass=user)(objectCategory=person))',
        usernameattr => 'sAMAccountName',
        userfirstnameattr => 'givenName',
        userlastnameattr => 'sn',
        userdisplaynameattr => 'displayName',
        usertitleattr => 'personaltitle',
        usercompanyattr => 'company',
        usercellphoneattr => 'mobile',
        userworkphoneattr => 'telephoneNumber',
        userhomephoneattr => 'homephone',
        userfaxphoneattr => 'facsimileTelephoneNumber',
        usermailattr => 'mail',
        usergroupmemberattr => 'memberOf',
        la => 'ipphone',
        groupdnaddition => '',
        groupobjectclass => 'group',
        groupobjectfilter => '(objectCategory=Group)',
        groupmemberattr => 'member',
        sync => '0 * * * *'
    });
    $settings{'driver'} = 'Msad2';
    $settings{'name'} = 'NethServer AD';
}

if ($sssd->isLdap or $sssd->isAD) {
    # Connect to asterisk mysql
    my $mysqlpwd = NethServer::Password::store('mysql');
    my $dbh = DBI->connect("DBI:mysql:database=asterisk;host=localhost","root",$mysqlpwd,{'RaiseError' => 1});

    # Check if there is a NethServer AD or LDAP already configured and gets its id
    my $id;
    my $sth = $dbh->prepare("SELECT id,name FROM `userman_directories` WHERE `name` LIKE 'NethServer LDAP%' OR `name` LIKE 'NethServer AD%'");
    $sth->execute();
    if (my $ref = $sth->fetchrow_hashref()) {
        $id = $ref->{'id'};
        if (($ref->{'name'} eq 'NethServer LDAP') or ($ref->{'name'} eq 'NethServer AD')) {
            # Update configuration
            $dbh->do("UPDATE IGNORE kvstore_FreePBX_modules_Userman SET `key`='auth-settings', `val`='" . $settings{'auth-settings'} . "',`type`='json-arr' WHERE `id`=".$id."");
        }
        $sth->finish();
    } else {
        # Set defautl to 0 for other userman_directories
        $dbh->do("UPDATE IGNORE `userman_directories` SET `default` = 0");
        # Create entry for NethServer AD/LDAP in userman_directories
        $dbh->do("INSERT INTO `userman_directories` (`name`, `driver`, `active`, `order`, `default`, `locked`) VALUES ('" . $settings{'name'} . "','" . $settings{'driver'} . "',1,5,1,0)");
        $sth->finish();
        $sth->execute();
        $ref = $sth->fetchrow_hashref();
        $id = $ref->{'id'};
        $sth->finish();
        # Create configuration
        $dbh->do("INSERT INTO kvstore_FreePBX_modules_Userman (`key`, `val`, `type`, `id`) VALUES ('auth-settings','" . $settings{'auth-settings'} . "','json-arr',".$id.")");
    }
    $dbh->disconnect();

    system("/usr/bin/scl enable rh-php56 -- /usr/sbin/fwconsole userman --sync $id --force");

    # HACK: "fwconsole userman sync" will return 1 if there is no user insidethe the LDAP
    $ret = $? >> 8;
    if ( $ret == 1) {
        $ret = 0;
    }
    exit($ret);
}

